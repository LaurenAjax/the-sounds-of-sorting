package edu.grinnell.csc207.soundsofsorting.sorts;

import java.util.List;

import edu.grinnell.csc207.soundsofsorting.sortevents.SortEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.CompareEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.SwapEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.CopyEvent;
import java.util.ArrayList;
import java.util.Arrays;

/**
 * A collection of sorting algorithms.
 */
public class Sorts {
    /**
     * Swaps indices <code>i</code> and <code>j</code> of array <code>arr</code>.
     * @param <T> the carrier type of the array
     * @param arr the array to swap
     * @param i the first index to swap
     * @param j the second index to swap
     */
    public static <T> void swap(T[] arr, int i, int j) {
        T tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    /**
     * Sorts the array according to the bubble sort algorithm:
     * <pre>
     * [ unprocessed | i largest elements in order ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> bubbleSort(T[] arr) {
        List<SortEvent<Integer>> list = new ArrayList<>();
        for (int i = 1; i < arr.length; i++) {
            for (int j = 0; j < arr.length - i; j++) {
                list.add(new CompareEvent(j, j + 1));
                if (arr[j].compareTo(arr[j + 1]) > 0) {
                    list.add(new SwapEvent(j, j + 1));
                    swap(arr, j, j + 1);
                }
            }
        }
        return list;
    }

    /**
     * Sorts the array according to the selection sort algorithm:
     * <pre>
     * [ i smallest elements in order | unprocessed ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> 
        selectionSort(T[] arr) {
        List<SortEvent<Integer>> list = new ArrayList<>();
        int min;
        for (int i = 0; i < arr.length - 1; i++) {
            min = i;
            for (int j = i + 1; j < arr.length; j++) {
                list.add(new CompareEvent(min, j));
                if (arr[min].compareTo(arr[j]) > 0) {
                    min = j;
                }
            }
            list.add(new SwapEvent(min, i));
            swap(arr, min, i);
        }
        return list;
    }

    /**
     * Sorts the array according to the insertion sort algorithm:
     * <pre>
     * [ i elements in order | unprocessed ] 
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> 
        insertionSort(T[] arr) {
        List<SortEvent<Integer>> list = new ArrayList<>();
        for (int i = 1; i < arr.length; i++) {
            for (int j = i - 1; j >= 0; j--) {
                list.add(new CompareEvent(j + 1, j));
                if (arr[j + 1].compareTo(arr[j]) < 0) {
                    list.add(new SwapEvent(j + 1, j));
                    swap(arr, j + 1, j);
                }
            }
        }
        return list;
    }

    /**
     * Merges two sorted sides of an array into one sorted whole.
     *
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @param leftArr the left array to be merged
     * @param rightArr the right array to be merged
     * @param left the left index to start at
     * @param right the right index to end at
     * @param list
     */
    public static <T extends Comparable<? super T>> void 
        merge(T[] arr, T[] leftArr, T[] rightArr, int left, int right, 
                List<SortEvent<Integer>> list) {
        
        int leftInd = 0;
        int rightInd = 0;
        int sortedInd = 0;
        
        while (leftInd < left && rightInd < right) {
            list.add(new CompareEvent(leftInd, rightInd));
            if (leftArr[leftInd].compareTo(rightArr[rightInd]) <= 0) {
                list.add(new CopyEvent(leftArr, sortedInd, leftInd));
                arr[sortedInd++] = leftArr[leftInd++];
            } else {
                list.add(new CopyEvent(rightArr, sortedInd, rightInd));
                arr[sortedInd++] = rightArr[rightInd++];
            }
        }
        
        while (leftInd < leftArr.length) {
            list.add(new CopyEvent(leftArr, sortedInd, leftInd));
            arr[sortedInd++] = leftArr[leftInd++];
        }
        
        while (rightInd < rightArr.length) {
            list.add(new CopyEvent(rightArr, sortedInd, rightInd));
            arr[sortedInd++] = rightArr[rightInd++];
        }
    }

    /**
     * Sorts each half of the array and then merges them (main execution of
     * merge sort)
     *
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @param length the length of the given array
     * @param list
     */
    public static <T extends Comparable<? super T>> void 
        sort(T arr[], int length, List<SortEvent<Integer>> list) {
        if (length < 2) {
            return;
        }
        int mid = length / 2;
        T[] leftArr = (T[]) new Comparable[mid];
        T[] rightArr = (T[]) new Comparable[length - mid];
        
        for (int i = 0; i < mid; i++) {
            leftArr[i] = arr[i];
        }
        for (int j = mid; j < length; j++) {
            rightArr[j - mid] = arr[j];
        }
        
        sort(leftArr, mid, list);
        sort(rightArr, length - mid, list);

        merge(arr, leftArr, rightArr, mid, length - mid, list);
    }

    /**
     * Sorts the array according to the merge sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> mergeSort(T[] arr) {
        List<SortEvent<Integer>> list = new ArrayList<>();
        sort(arr, arr.length, list);
        return list;
    }

    /**
     * Sorts the array via the pivots.
     *
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @param lo the lower index of the array
     * @param hi the higher index of the array
     * @param list
     */
    public static <T extends Comparable<? super T>> void 
        quick(T[] arr, int lo, int hi, List<SortEvent<Integer>> list) {
        if (lo >= hi) {
            return;
        }
        int pivot = hi;
        int lowerPtr = lo;
        int higherPtr = hi;

        while (lowerPtr < higherPtr) {
            list.add(new CompareEvent(lowerPtr, pivot));
            while (arr[lowerPtr].compareTo(arr[pivot]) <= 0 && lowerPtr < hi) {
                lowerPtr++;
            }
            list.add(new CompareEvent(higherPtr, pivot));
            while (arr[higherPtr].compareTo(arr[pivot]) > 0 && higherPtr > lo) {
                higherPtr--;
            }
            if (lowerPtr < higherPtr) {
                list.add(new SwapEvent(lowerPtr, higherPtr));
                swap(arr, lowerPtr, higherPtr);
            }
        }

        list.add(new SwapEvent(pivot, lowerPtr));
        swap(arr, pivot, lowerPtr);
        pivot = lowerPtr;

        quick(arr, lo, pivot - 1, list);
        quick(arr, pivot + 1, hi, list);
    }

    /**
     * Sorts the array according to the quick sort algorithm.
     * 
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> quickSort(T[] arr) {
        List<SortEvent<Integer>> list = new ArrayList<>();
        quick(arr, 0, arr.length - 1, list);
        return list;
    }
    
    /**
     * Sorts the array by finding the minimum element in the given array not
     * already present in a new array, and moving it to said new array, then
     * copying the new array onto the old one.
     * 
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> mySort(T[] arr) {
        List<SortEvent<Integer>> list = new ArrayList<>();
        int min = 0;
        for (int i = 1; i < arr.length; i++) {
            list.add(new CompareEvent(i, min));
            if (arr[i].compareTo(arr[min]) < 0) {
                min = i;
            }
        }
        T[] newArr = (T[]) new Comparable[arr.length];
        newArr[0] = arr[min];
        int max = 0;
        for (int j = 1; j < arr.length; j++) {
            list.add(new CompareEvent(j, max));
            if (arr[j].compareTo(arr[max]) > 0) {
                max = j;
            }
        }
        for (int k = 1; k < arr.length; k++) {
            min = max;
            for (int l = 0; l < arr.length; l++) {
                list.add(new CompareEvent(l, min));
                list.add(new CompareEvent(l, k - 1));
                if (arr[l].compareTo(arr[min]) < 0 && arr[l].compareTo(newArr[k - 1]) > 0) {
                    min = l;
                }
            }
            newArr[k] = arr[min];
        }
        for (int m = 0; m < arr.length; m++) {
            list.add(new CopyEvent(newArr, m, m));
            arr[m] = newArr[m];
        }
        return list;
    }
    
    /**
     * Applies all non CompareEvent SortEvents in the list to the array
     * 
     * @param <T> the carrier type of the array
     * @param l the array to sort
     * @param events a list of all SortEvent done in the sort
     */
    public static <T extends Comparable<? super T>> void 
        eventSort(T[] l, List<SortEvent<T>> events) {
        for (int i = 0; i < events.size(); i++) {
            if (!(events.get(i) instanceof CompareEvent)) {
                events.get(i).apply(l);
            }
        }
    }
}
